/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2024-08-16 03:49:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class inputDynamic_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	div{\r\n");
      out.write("		width: 800px;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("		margin: auto;\r\n");
      out.write("	}\r\n");
      out.write("	table{\r\n");
      out.write("		width: 100%;\r\n");
      out.write("		border-collapse: collapse;\r\n");
      out.write("	}\r\n");
      out.write("	th, td{\r\n");
      out.write("		border: 1px solid gray;\r\n");
      out.write("	}\r\n");
      out.write("	th{\r\n");
      out.write("		padding: 5px;\r\n");
      out.write("		background-color: darkslateblue;\r\n");
      out.write("		color: white;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function search1(){\r\n");
      out.write("		location.href='/chapter16_search/Controller?cmd=allList';\r\n");
      out.write("	}\r\n");
      out.write("	function search2(){\r\n");
      out.write("		location.href='/chapter16_search/Controller?cmd=inputDept';\r\n");
      out.write("	}\r\n");
      out.write("	function search3(){\r\n");
      out.write("		location.href='/chapter16_search/Controller?cmd=inputDynamic';\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div>\r\n");
      out.write("		<h1>무엇을 검색 하시겠습니까?</h1>\r\n");
      out.write("		<form>\r\n");
      out.write("			<table>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>검색 옵션</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>\r\n");
      out.write("						선택 검색 :\r\n");
      out.write("						<select name = \"type\" onchange = \"placeholderChanger(this)\">\r\n");
      out.write("							<option value = \"employee_id\">직원 ID</option>\r\n");
      out.write("							<option value = \"full_name\">직원 이름</option>\r\n");
      out.write("							<option value = \"job_id\">직급</option>\r\n");
      out.write("							<option value = \"email\">직원 이메일</option>\r\n");
      out.write("							<option value = \"phone_number\">직원 전화번호</option>\r\n");
      out.write("							<option value = \"hire_date\">입사 일자</option>\r\n");
      out.write("						</select>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>\r\n");
      out.write("						입력 검색 :\r\n");
      out.write("						<input type = \"text\" placeholder=\"ID를 입력해 주세요.\" id = \"searching_content\" name = \"searching_content\" onkeydown=\"handleKeydown(event, this.form)\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>\r\n");
      out.write("						<input type = \"hidden\" value=\"dynamicList\" name = \"cmd\"> \r\n");
      out.write("						<input type = \"button\" value = \"검색\" onclick = \"dynamicSearching	(this.form)\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</form>\r\n");
      out.write("		<button style = \"margin-top : 20px;\" onclick = \"location.href='index.jsp'\">홈으로 돌아가기</button>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	 	\r\n");
      out.write("	 	// 사용자가 선택한 옵션 값과 입력한 값을 checkInfo 함수로 체킹하고 반환 받은 논리값을 이용해\r\n");
      out.write("	 	// 무사히 통과 받은 상태(true인 상태) 라면 컨트롤러로 폼들을 제출함\r\n");
      out.write("	function dynamicSearching(f){\r\n");
      out.write("		// select의 value값은 type(type in this case(option)), \r\n");
      out.write("		// 즉 해당 option의 value값으로 정의되어 있다고 함. \r\n");
      out.write("		let option = f.type.value;\r\n");
      out.write("		let searchValue = f.searching_content.value;\r\n");
      out.write("		let state = checkInfo(option, searchValue);\r\n");
      out.write("		\r\n");
      out.write("		if(state){\r\n");
      out.write("			f.action = \"/chapter16_search/Controller\"\r\n");
      out.write("			f.submit();	\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 각 입력값들이 유효한지를 선택된 select의 옵션 값과 사용자 입력값을 이용하여 비교\r\n");
      out.write("	function checkInfo(option, value){\r\n");
      out.write("		\r\n");
      out.write("		let checkId, checkName, checkEmail, checkNumber, checkJob, checkHireDate;\r\n");
      out.write("		\r\n");
      out.write("		// 옵션(사용자가 검색하고자 하는 카테고리)에 따라 조건문을 타고 미리 정의해 둔\r\n");
      out.write("		// 각 변수들에 정규식을 할당한 뒤 exec 메서드를 호출해 정규식에 해당 사용자의 입력값이 유효한지를 검사\r\n");
      out.write("		// 유효하지 않은 경우 경고 문구 후 함수 종료\r\n");
      out.write("		if(option === \"employee_id\"){\r\n");
      out.write("			// id는 정수 범위에서 최소1 최대4자리까지 (늘어날  사원들의 id를 생각)\r\n");
      out.write("            checkId = /^[0-9]{1,4}$/;\r\n");
      out.write("            if(!checkId.exec(value)){\r\n");
      out.write("                alert(\"올바른 사원의 ID를 입력해 주세요. (예시 : 100, 200)\");\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("        }else if(option === \"full_name\"){\r\n");
      out.write("        	// full name은 first_name과 last_name을 공백을 두고 서버에 전달할것이기 때문에\r\n");
      out.write("        	// 사용자에게 알파벳 범위 내에서 공백을 사이에 두고 한 자 이상씩을 받도록 설정\r\n");
      out.write("			let checkName = /^[a-zA-Z]+ [a-zA-Z]+$/;\r\n");
      out.write("			if(!checkName.exec(value)){\r\n");
      out.write("				alert(\"올바른 사원의 이름을 입력해 주세요. (예시 : Steven King, neena kochhar)\")\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		}else if(option === \"email\"){\r\n");
      out.write("			// 이메일의 경우 단순히 연속되는 문자열로만 구성되어 있기 때문에 1자 - 20자의 알파벳 범위 안에서 체킹\r\n");
      out.write("			let checkEmail = /^[a-zA-Z]{1,20}$/;\r\n");
      out.write("			if(!checkEmail.exec(value)){\r\n");
      out.write("				alert(\"올바른 사원의 이메일을 1자 이상 입력해 주세요. (예시 : sking, LDEHAAN)\")\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		}else if(option === \"phone_number\"){\r\n");
      out.write("		    // phone_number의 경우 점(.)을 기준으로 3-3-4 자리와 3-2-4-6자리, 두 종류로 나뉘어짐\r\n");
      out.write("		    // 그래서 입력되는 값은 점을 사이에 두고 3-3-4 자리의 정수값이거나 3-2-4-6자리의 정수로\r\n");
      out.write("		    // 선택적으로 사용자에게 받음\r\n");
      out.write("			let checkNumber = /^(?:\\d{3}\\.\\d{3}\\.\\d{4}|\\d{3}\\.\\d{2}\\.\\d{4}\\.\\d{6})$/;\r\n");
      out.write("		    if(!checkNumber.exec(value)){\r\n");
      out.write("		        alert(\"올바른 사원의 전화번호를 입력해 주세요. (예시 : 515.123.7777 또는 011.44.1644.429267)\");\r\n");
      out.write("		        return false;\r\n");
      out.write("		    }\r\n");
      out.write("		}else if(option === \"job_id\"){\r\n");
      out.write("			// 사원의 직급은 앞이 부서고 뒤가 직급을 의미함. 그래서 무난하게 알파벳 열자리로 입력 받도록 함\r\n");
      out.write("			let checkJob = /^[a-zA-Z]{1,10}$/;\r\n");
      out.write("			if(!checkJob.exec(value)){\r\n");
      out.write("				alert(\"올바른 사원의 직급을 입력해 주세요. (예시 : clerk 또는 MGR)\");\r\n");
      out.write("				return false\r\n");
      out.write("			}\r\n");
      out.write("		}else if (option === \"hire_date\") {\r\n");
      out.write("			// 입사 일자의 경우 RR(세기 구분 연도)/MM(월)/DD(일) 형식으로 저장되어 있는데\r\n");
      out.write("			// 이에 대한 정규식으로 슬래쉬(/)로 구분지어 각 두자리씩 00년부터 39년 중 하나, \r\n");
      out.write("			// 01월부터 12월 중, 01일부터 31일 중 하나의 값을 가지도록 함\r\n");
      out.write("		    let checkHireDate = /^(0[0-9]|1[0-9]|2[0-9]|3[0-9])\\/(0[1-9]|1[0-2])\\/(0[1-9]|[1-2][0-9]|3[0-1])$/;\r\n");
      out.write("		    if (!checkHireDate.test(value)) {\r\n");
      out.write("		        alert(\"올바른 사원의 입사 일자를 입력해 주세요. (예시 : 07/01/01)\");\r\n");
      out.write("		        return false;\r\n");
      out.write("		    }\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		return true;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	// 검색 창에 Enter 이벤트 키가 발생할 때 기본 동작 방식을 방지하고 dynamicSearching 함수를 실행\r\n");
      out.write("	// 검색 버튼을 눌렀을 때와 동일한 과정이 진행\r\n");
      out.write("	function handleKeydown(event, form) {\r\n");
      out.write("        if (event.key === 'Enter') {\r\n");
      out.write("            event.preventDefault(); \r\n");
      out.write("            dynamicSearching(form); \r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("	\r\n");
      out.write("	// 옵션 변경시 입력 내용 초기화하는 함수\r\n");
      out.write("	function placeholderChanger(option) {\r\n");
      out.write("	    let text;\r\n");
      out.write("		\r\n");
      out.write("	    // this(select)의 value(선택된 option 중 하나의 값)에 따라 text에 선택지의 문구를 골라 할당\r\n");
      out.write("	    switch (option.value) {\r\n");
      out.write("	        case \"employee_id\":\r\n");
      out.write("	            text = \"ID를 입력해 주세요.\";\r\n");
      out.write("	            break;\r\n");
      out.write("	        case \"full_name\":\r\n");
      out.write("	            text = \"이름을 입력해 주세요.\";\r\n");
      out.write("	            break;\r\n");
      out.write("	        case \"email\":\r\n");
      out.write("	            text = \"이메일을 입력해 주세요.\";\r\n");
      out.write("	            break;\r\n");
      out.write("	        case \"phone_number\":\r\n");
      out.write("	            text = \"전화번호를 입력해 주세요.\";\r\n");
      out.write("	            break;\r\n");
      out.write("	        case \"job_id\":\r\n");
      out.write("	            text = \"직급을 입력해 주세요.\";\r\n");
      out.write("	            break;\r\n");
      out.write("	        case \"hire_date\":\r\n");
      out.write("	            text = \"입사일자를 입력해 주세요.\";\r\n");
      out.write("	            break;\r\n");
      out.write("	    }\r\n");
      out.write("\r\n");
      out.write("	    // 검색 입력 요소 선택 후 placeholder를 type(선택된 옵션의 name)에 따라 할당 된 text값으로 할당\r\n");
      out.write("	    // 이때 value(입력 상태)도 빈 문자열로 같이 초기화\r\n");
      out.write("	    let item = document.querySelector('#searching_content')\r\n");
      out.write("	    item.placeholder = text;\r\n");
      out.write("	    item.value = \"\";\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
